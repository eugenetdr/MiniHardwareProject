/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [6:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg [2:0] out,
    input [2:0] io
  );
  
  
  
  localparam NUM_STATES = 4'h8;
  
  reg rst;
  
  wire [1-1:0] M_fa_sum;
  wire [1-1:0] M_fa_cOut;
  reg [1-1:0] M_fa_a;
  reg [1-1:0] M_fa_b;
  reg [1-1:0] M_fa_cIn;
  fulladder_1 fa (
    .a(M_fa_a),
    .b(M_fa_b),
    .cIn(M_fa_cIn),
    .sum(M_fa_sum),
    .cOut(M_fa_cOut)
  );
  
  wire [7-1:0] M_seg_segs;
  reg [4-1:0] M_seg_char;
  seven_seg_2 seg (
    .char(M_seg_char),
    .segs(M_seg_segs)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_3 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_slowclk_value;
  counter_4 slowclk (
    .clk(clk),
    .rst(rst),
    .value(M_slowclk_value)
  );
  
  localparam PASS_state = 1'd0;
  localparam FAIL_state = 1'd1;
  
  reg M_state_d, M_state_q = PASS_state;
  reg [2:0] M_count_d, M_count_q = 1'h0;
  
  always @* begin
    M_state_d = M_state_q;
    M_count_d = M_count_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    out = 1'h0;
    M_fa_a = io_dip[0+0+0-:1];
    M_fa_b = io_dip[0+1+0-:1];
    M_fa_cIn = io_dip[0+2+0-:1];
    M_seg_char = 1'h1;
    if (io_dip[8+0+0-:1] == 1'h0) begin
      io_led[0+7-:8] = {4'h8{M_fa_sum}};
      io_led[8+7-:8] = {4'h8{M_fa_cOut}};
      out[0+0-:1] = io_dip[0+0+0-:1];
      out[1+0-:1] = io_dip[0+1+0-:1];
      out[2+0-:1] = io_dip[0+2+0-:1];
      io_led[16+0+1-:2] = {2'h2{io_dip[0+0+0-:1]}};
      io_led[16+3+1-:2] = {2'h2{io_dip[0+1+0-:1]}};
      io_led[16+6+1-:2] = {2'h2{io_dip[0+2+0-:1]}};
      if (M_fa_sum == io[0+0-:1] && M_fa_cOut == io[1+0-:1]) begin
        M_seg_char = 1'h1;
        io_seg = ~M_seg_segs;
        io_sel = 4'he;
      end else begin
        M_seg_char = 2'h2;
        io_seg = ~M_seg_segs;
        io_sel = 4'he;
      end
    end
    if (io_dip[8+0+0-:1] == 1'h1) begin
      M_count_d = 1'h0;
      M_seg_char = 2'h2;
      M_fa_a = M_count_q[0+0-:1];
      M_fa_b = M_count_q[1+0-:1];
      M_fa_cIn = M_count_q[2+0-:1];
      io_led[0+7-:8] = {4'h8{M_fa_sum}};
      io_led[8+7-:8] = {4'h8{M_fa_cOut}};
      out[0+0-:1] = M_count_q[0+0-:1];
      out[1+0-:1] = M_count_q[1+0-:1];
      out[2+0-:1] = M_count_q[2+0-:1];
      io_led[16+0+1-:2] = {2'h2{M_count_q[0+0-:1]}};
      io_led[16+3+1-:2] = {2'h2{M_count_q[1+0-:1]}};
      io_led[16+6+1-:2] = {2'h2{M_count_q[2+0-:1]}};
      
      case (M_state_q)
        FAIL_state: begin
          M_seg_char = 2'h2;
          io_seg = ~M_seg_segs;
          io_sel = 4'he;
          M_state_d = FAIL_state;
          if (io_button[1+0-:1]) begin
            M_state_d = PASS_state;
          end
        end
        PASS_state: begin
          if (M_fa_sum == io[0+0-:1] && M_fa_cOut == io[1+0-:1]) begin
            M_seg_char = 1'h1;
            io_seg = ~M_seg_segs;
            io_sel = 4'he;
            M_count_d = M_count_q + 1'h1;
            M_state_d = PASS_state;
          end else begin
            M_seg_char = 2'h2;
            io_seg = ~M_seg_segs;
            io_sel = 4'he;
            M_state_d = FAIL_state;
          end
        end
      endcase
    end
  end
  
  always @(posedge M_slowclk_value) begin
    M_count_q <= M_count_d;
    
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
